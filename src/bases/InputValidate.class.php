<?php
/*******************************************
 *  描述：用户输入数据检查和过滤
 *  作者：heiyeluren
 *  创建：2008-09-02 19:05
 *  修改：2008-09-02 21:22
 *******************************************/


//包含基础处理类
include_once("Exception.class.php");
include_once("VerifyUtil.class.php");


/**
 * 数据来源类型
 */
define("IV_POST",			1);
define("IV_GET",			2);
define("IV_REQUEST",		3);
define("IV_ENV",			4);
define("IV_SERVER",			5);

/**
 * 数据过滤类型
 */
define("FILTER_UNSAFE_RAW",	1);
define("FILTER_STRIPPED",	2);
define("FILTER_COOKED",		3);
define("FILTER_HTML",		4);
define("FILTER_EMAIL",		5);
define("FILTER_URL",		6);
define("FILTER_NUMBER",		7);

/**
 * HTML处理类型
 */
define("HTML_NO_TAGS",		1);
define("HTML_SHOW_TAGS",	2);
define("HTML_LITTLE_TAGS",	3);
define("HTML_MOSTLY_TAGS",	4);
define("HTML_TEXT_TAGS",	5);


/**
 * 数据校验检查过滤类
 *
 * 包含基本的数据完整性、正确性、安全性、合法性检查的函数接口，一般提供直接调用
 */
class InputValidate
{


	/**
	 * 通用数据获取函数(能够调用缺省函数)
	 *
	 * @param int $type 需要从什么地方获取变量，$_POST, $_GET, $_REQUEST 等，参考相应的类常量
	 * @param string $varName 变量名，需要获取的变量名称
	 * @param int $filter 需要调用的过滤器，缺省是 getStripped，参考相应的类常量，
	 *					  注意：如果设定是 UNSAFE，则会返回原始数据，这是很危险的
	 * @return mixed 返回处理后的结果
	 */
	function getData($type, $varName, $filter = ''){
		$var = '';
		switch ($type) {
			case IV_POST:
				if(!isset($_POST[$varName])){
					return '';
				}
				$var = $_POST[$varName];
				break;
			case IV_GET:
				if(!isset($_GET[$varName])){
					return '';
				}
				$var = $_GET[$varName];
				break;
			case IV_REQUEST:
				if(!isset($_REQUEST[$varName])){
					return '';
				}
				$var = $_REQUEST[$varName];
				break;
			case IV_ENV:
				if(!isset($_ENV[$varName])){
					return '';
				}
				$var = $_ENV[$varName];
				break;
			case IV_SERVER:
				if(!isset($_SERVER[$varName])){
					return '';
				}
				$var = $_SERVER[$varName];
				break;
			default:
				if(!isset($_REQUEST[$varName])){
					return '';
				}
				$var = $_REQUEST[$varName];
		}
		if (!$filter){
			switch($filter){
				case FILTER_UNSAFE_RAW: return $var;
				case FILTER_STRIPPED: return self::getStripped($var);
				case FILTER_COOKED: return self::getCooked($var);
				case FILTER_HTML: return self::getHtml($var);
				case FILTER_EMAIL: return self::getEmail($var);				
				case FILTER_URL: return self::getUrl($var);
				case FILTER_NUMBER: return self::getNumber($var);
				default: return self::getStripped($var);
			}
		}
		return self::getStripped($var);		
	}

	/**
	 * 获取HTML过滤
	 *
	 * @param string $str 需要过滤的字符串
	 * @param int $htmlType 过滤的级别和类型，参考相应的类常量，缺省为过滤所有标记
	 * @return string 返回过滤的后的结果
	 */
	function getHtml($str, $htmlType = HTML_NO_TAGS){
		if (is_array($str) || is_object($str)){
			return $str;
		}
		switch($htmlType){
			//剔除所有HTML
			case HTML_NO_TAGS:
				$str = VerifyUtil::stripHtmlTag(VerifyUtil::filterScript($str), true);
				break;
			//把HTML转换为可显示
			case HTML_SHOW_TAGS:
				$str = VerifyUtil::filterHtmlWord($str);
				break;
			//保存部分危害性小的HTML标签
			case HTML_LITTLE_TAGS:
				$str = strip_tags(VerifyUtil::filterScript($str), '<h1><h2><h3><h4><h5><h6><strong><code><b><i><tt><sub><sup><big><small><hr><br><font>');
				break;
			//保存大部分HTML标签
			case HTML_MOSTLY_TAGS:
				$str = strip_tags(VerifyUtil::filterScript($str), '<p><h1><h2><h3><h4><h5><h6><strong><em><abbr><acronym><address><bdo><blockquote><cite><q><code><ins><del><dfn><kbd><pre><samp><var><br><a><base><img><area><map><ul><ol><li><dl><dt><dd><table><tr><td><th><tbody><thead><tfoot><col><colgroup><caption><b><i><tt><sub><sup><big><small><hr><div><span>');
				break;
			//保留所有HTML标签(除了script,iframe,object)
			case HTML_TEXT_TAGS:
				$str = VerifyUtil::escapeScript($str);
				break;	
			default:
				$str = VerifyUtil::stripHtmlTag(VerifyUtil::filterScript($str), true);
		}
		return $str;
	}


	/**
	 * 替换所有的 <,>,',",& 为HTML实体
	 *
	 * @param string $str 需要过滤的字符串
	 * @return string 返回过滤的后的结果
	 */
	function getHtmlFull($str){
		if (is_array($str) || is_object($str)){
			return $str;
		}
		return VerifyUtil::filterHtmlWord($str);
	}

	/**
	 * 对字符串进行严格的剔除操作(会剔除所有HTML，ASC码小于7的控制字符，SQL注入字符转义)
	 *
	 * @param string $str 需要剔除的原始串
	 * @reutrn string 返回剔除后的串
	 */
	function getStripped($str){
		if (is_array($str) || is_object($str)){
			return $str;
		}
		return VerifyUtil::filterSqlInject(self::getHtml(preg_replace("/([\x00-\x07])/", "", $str), HTML_NO_TAGS));
	}

	/**
	 * 对字符串进行严格的转换操作(会转换所有HTML为能显示的，ASC码小于7的控制字符转换为空格)
	 *
	 * @param string $str 需要转换的原始串
	 * @reutrn string 返回转换后的串
	 */
	function getCooked(){
		if (is_array($str) || is_object($str)){
			return $str;
		}
		return self::getHtml(preg_replace("/([\x00-\x07])/", "&nbsp;", $str), HTML_SHOW_TAGS);
	}

	/**
	 * 处理Email地址
	 *
	 * @param string $str 需要处理的原始串
	 * @param bool $strict 是否采取严格方式，如果是，那么Email地址不合法则会返回空
	 * @return 处理后的串
	 */
	function getEmail($str, $strict = false){
		if (is_array($str) || is_object($str)){
			return $str;
		}
		if ($strict){
			if (!VerifyUtil::isEmail($str)){
				return '';
			}
			return $str;
		}
		return preg_replace("/(^[a-zA-Z0-9\.@_\-])/", "", $str);
	}

	/**
	 * 处理URL地址
	 *
	 * @param string $str URL地址串
	 * @return string 如果不是合法的URL，将返回空字符串
	 */
	function getUrl($str){
		if (is_array($str) || is_object($str)){
			return $str;
		}
		if (!VerifyUtil::isUrl($str)){
			return '';
		}
		return $str;
	}

	/**
	 * 处理数字
	 *
	 * @param string $str 要处理的数字串
	 * @return string 将会保留数字，科学计数法相应的字符，其他都会被剔除
	 */
	function getNumber($str){
		if (is_array($str) || is_object($str)){
			return $str;
		}
		if (is_numeric($str)){
			return $str;
		}
		return preg_replace("/(^[0-9\.+E])/", "", $str);
	}



}


